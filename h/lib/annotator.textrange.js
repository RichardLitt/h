// Generated by CoffeeScript 1.6.3
/*
** Annotator 1.2.6-dev-bd83931
** https://github.com/okfn/annotator/
**
** Copyright 2012 Aron Carroll, Rufus Pollock, and Nick Stenning.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2014-04-17 01:33:33Z
*/



/*
//
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Annotator.Plugin.TextRange = (function(_super) {
    __extends(TextRange, _super);

    function TextRange() {
      this._invalidateAnchor = __bind(this._invalidateAnchor, this);
      this._createAnchorFromTextRangeSelector = __bind(this._createAnchorFromTextRangeSelector, this);
      this._createTextRangeSelectorFromRange = __bind(this._createTextRangeSelectorFromRange, this);
      _ref = TextRange.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextRange.prototype.pluginInit = function() {
      if (!this.annotator.plugins.EnhancedAnchoring) {
        throw new Error("The TextRange Annotator plugin requires the EnhancedAnchoring plugin.");
      }
      this.Annotator = Annotator;
      this.$ = Annotator.$;
      this.annotator.registerSelectorCreator({
        name: "TextRange",
        describe: this._createTextRangeSelectorFromRange
      });
      return this.annotator.registerAnchoringStrategy({
        name: "range",
        priority: 25,
        create: this._createAnchorFromTextRangeSelector,
        verify: this._invalidateAnchor
      });
    };

    TextRange.prototype._createTextRangeSelectorFromRange = function(selection) {
      var dfd, sr;
      dfd = this.$.Deferred();
      if (selection.type !== "text range") {
        dfd.reject("I can only describe text ranges");
        return dfd.promise();
      }
      sr = selection.range.serialize(this.annotator.wrapper[0]);
      dfd.resolve([
        {
          type: "RangeSelector",
          startContainer: sr.startContainer,
          startOffset: sr.startOffset,
          endContainer: sr.endContainer,
          endOffset: sr.endOffset
        }
      ]);
      return dfd.promise();
    };

    TextRange.prototype._createAnchorFromTextRangeSelector = function(target) {
      var currentQuote, dfd, error, normedRange, range, savedQuote, selector, _base,
        _this = this;
      dfd = this.$.Deferred();
      selector = this.annotator.findSelector(target.selector, "RangeSelector");
      if (selector == null) {
        dfd.reject("no RangeSelector found", true);
        return dfd.promise();
      }
      try {
        range = this.Annotator.Range.sniff(selector);
        normedRange = range.normalize(this.annotator.wrapper[0]);
      } catch (_error) {
        error = _error;
        dfd.reject("failed to normalize range: " + error.message);
        return dfd.promise();
      }
      savedQuote = typeof (_base = this.annotator).getQuoteForTarget === "function" ? _base.getQuoteForTarget(target) : void 0;
      if (this.annotator.plugins.TextPosition) {
        this.annotator.domMapper.prepare("anchoring").then(function(s) {
          var currentQuote, endInfo, endOffset, q, startInfo, startOffset, _ref1, _ref2;
          startInfo = s.getStartInfoForNode(normedRange.start);
          startOffset = startInfo.start;
          if (startOffset == null) {
            dfd.reject("the saved quote doesn't match");
            return dfd.promise();
          }
          endInfo = s.getEndInfoForNode(normedRange.end);
          endOffset = endInfo.end;
          if (endOffset == null) {
            dfd.reject("the saved quote doesn't match");
            return dfd.promise();
          }
          q = s.getCorpus().slice(startOffset, endOffset).trim();
          currentQuote = _this.annotator.normalizeString(q);
          if ((savedQuote != null) && currentQuote !== savedQuote) {
            dfd.reject("the saved quote doesn't match");
            return dfd.promise();
          }
          return dfd.resolve({
            type: "text position",
            start: startInfo.start,
            end: endInfo.end,
            startPage: (_ref1 = startInfo.pageIndex) != null ? _ref1 : 0,
            endPage: (_ref2 = endInfo.pageIndex) != null ? _ref2 : 0,
            quote: currentQuote
          });
        });
      } else {
        currentQuote = this.annotator.normalizeString(normedRange.text().trim());
        if ((savedQuote != null) && currentQuote !== savedQuote) {
          dfd.reject("the saved quote doesn't match");
          return dfd.promise();
        }
        dfd.resolve({
          type: "text range",
          range: normedRange,
          quote: currentQuote,
          startPage: 0,
          endPage: 0
        });
      }
      return dfd.promise();
    };

    TextRange.prototype._invalidateAnchor = function(anchor) {
      var dfd;
      dfd = this.$.Deferred();
      dfd.resolve(false);
      return dfd.promise();
    };

    return TextRange;

  })(Annotator.Plugin);

}).call(this);

//
//@ sourceMappingURL=annotator.textrange.map