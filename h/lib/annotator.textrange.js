// Generated by CoffeeScript 1.6.3
/*
** Annotator 1.2.6-dev-ec66a7c
** https://github.com/okfn/annotator/
**
** Copyright 2012 Aron Carroll, Rufus Pollock, and Nick Stenning.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2014-04-14 22:57:43Z
*/



/*
//
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Annotator.Plugin.TextRange = (function(_super) {
    __extends(TextRange, _super);

    function TextRange() {
      this.createFromRangeSelector = __bind(this.createFromRangeSelector, this);
      this._getRangeSelector = __bind(this._getRangeSelector, this);
      _ref = TextRange.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextRange.prototype.pluginInit = function() {
      this.Annotator = Annotator;
      this.annotator.selectorCreators.push({
        name: "RangeSelector",
        describe: this._getRangeSelector
      });
      return this.annotator.anchoringStrategies.push({
        name: "range",
        code: this.createFromRangeSelector
      });
    };

    TextRange.prototype._getRangeSelector = function(selection) {
      var sr;
      if (selection.type !== "text range") {
        return [];
      }
      sr = selection.range.serialize(this.annotator.wrapper[0]);
      return [
        {
          type: "RangeSelector",
          startContainer: sr.startContainer,
          startOffset: sr.startOffset,
          endContainer: sr.endContainer,
          endOffset: sr.endOffset
        }
      ];
    };

    TextRange.prototype.createFromRangeSelector = function(annotation, target) {
      var currentQuote, endInfo, endOffset, error, normedRange, range, savedQuote, selector, startInfo, startOffset, _base, _ref1, _ref2;
      selector = this.annotator.findSelector(target.selector, "RangeSelector");
      if (selector == null) {
        return null;
      }
      try {
        range = this.Annotator.Range.sniff(selector);
        normedRange = range.normalize(this.annotator.wrapper[0]);
      } catch (_error) {
        error = _error;
        return null;
      }
      currentQuote = this.annotator.normalizeString(this.annotator.plugins.DomTextMapper ? (startInfo = this.annotator.domMapper.getInfoForNode(normedRange.start), startOffset = startInfo.start, endInfo = this.annotator.domMapper.getInfoForNode(normedRange.end), endOffset = endInfo.end, this.annotator.domMapper.getCorpus().slice(startOffset, +(endOffset - 1) + 1 || 9e9).trim()) : normedRange.text().trim());
      savedQuote = typeof (_base = this.annotator).getQuoteForTarget === "function" ? _base.getQuoteForTarget(target) : void 0;
      if ((savedQuote != null) && currentQuote !== savedQuote) {
        return null;
      }
      if (this.annotator.plugins.TextPosition) {
        return {
          type: "text position",
          annotation: annotation,
          target: target,
          startPage: (_ref1 = startInfo.pageInfo) != null ? _ref1 : 0,
          endPage: (_ref2 = endInfo.pagenfo) != null ? _ref2 : 0,
          start: startInfo.start,
          end: endInfo.end,
          quote: currentQuote
        };
      } else {
        return {
          type: "text range",
          annotation: annotation,
          target: target,
          startPage: 0,
          endPage: 0,
          range: normedRange,
          qute: correntQuote
        };
      }
    };

    return TextRange;

  })(Annotator.Plugin);

}).call(this);

//
//@ sourceMappingURL=annotator.textrange.map