// Generated by CoffeeScript 1.6.3
/*
** Annotator 1.2.6-dev-ec66a7c
** https://github.com/okfn/annotator/
**
** Copyright 2012 Aron Carroll, Rufus Pollock, and Nick Stenning.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2014-04-14 22:57:44Z
*/



/*
//
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Annotator.Plugin.TextPosition = (function(_super) {
    __extends(TextPosition, _super);

    function TextPosition() {
      this.createFromPositionSelector = __bind(this.createFromPositionSelector, this);
      this._getTextPositionSelector = __bind(this._getTextPositionSelector, this);
      _ref = TextPosition.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextPosition.prototype.pluginInit = function() {
      if (!this.annotator.plugins.DomTextMapper) {
        throw new Error("The TextPosition Annotator plugin requires the DomTextMapper plugin.");
      }
      this.annotator.selectorCreators.push({
        name: "TextPositionSelector",
        describe: this._getTextPositionSelector
      });
      return this.annotator.anchoringStrategies.push({
        name: "position",
        code: this.createFromPositionSelector
      });
    };

    TextPosition.prototype._getTextPositionSelector = function(selection) {
      var endOffset, startOffset;
      if (selection.type !== "text range") {
        return [];
      }
      startOffset = (this.annotator.domMapper.getInfoForNode(selection.range.start)).start;
      endOffset = (this.annotator.domMapper.getInfoForNode(selection.range.end)).end;
      return [
        {
          type: "TextPositionSelector",
          start: startOffset,
          end: endOffset
        }
      ];
    };

    TextPosition.prototype.createFromPositionSelector = function(annotation, target) {
      var content, currentQuote, savedQuote, selector, _base;
      selector = this.annotator.findSelector(target.selector, "TextPositionSelector");
      if (selector == null) {
        return;
      }
      content = this.annotator.domMapper.getCorpus().slice(selector.start, +(selector.end - 1) + 1 || 9e9).trim();
      currentQuote = this.annotator.normalizeString(content);
      savedQuote = typeof (_base = this.annotator).getQuoteForTarget === "function" ? _base.getQuoteForTarget(target) : void 0;
      if ((savedQuote != null) && currentQuote !== savedQuote) {
        return null;
      }
      return {
        type: "text position",
        annotation: annotation,
        target: target,
        startPage: this.annotator.domMapper.getPageIndexForPos(selector.start),
        endPage: this.annotator.domMapper.getPageIndexForPos(selector.end),
        start: selector.start,
        end: selector.end,
        quote: currentQuote
      };
    };

    return TextPosition;

  })(Annotator.Plugin);

}).call(this);

//
//@ sourceMappingURL=annotator.textposition.map