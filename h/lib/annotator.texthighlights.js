// Generated by CoffeeScript 1.6.3
/*
** Annotator 1.2.6-dev-e1a17c0
** https://github.com/okfn/annotator/
**
** Copyright 2012 Aron Carroll, Rufus Pollock, and Nick Stenning.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2014-04-16 07:52:02Z
*/



/*
//
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var TextHighlight, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TextHighlight = (function(_super) {
    __extends(TextHighlight, _super);

    TextHighlight.$ = Annotator.$;

    TextHighlight.prototype._highlightRange = function(normedRange, cssClass) {
      var hl, nodes, white;
      if (cssClass == null) {
        cssClass = 'annotator-hl';
      }
      white = /^\s*$/;
      hl = this.$("<span class='" + cssClass + "'></span>");
      nodes = this.$(normedRange.textNodes()).filter(function(i) {
        return !white.test(this.nodeValue);
      });
      return nodes.wrap(hl).parent().show().toArray();
    };

    function TextHighlight(anchor, pageIndex, normedRange) {
      TextHighlight.__super__.constructor.call(this, anchor, pageIndex);
      this.$ = TextHighlight.$;
      this._highlights = this._highlightRange(normedRange);
      this.$(this._highlights).data("annotation", this.annotation);
    }

    TextHighlight.prototype.isTemporary = function() {
      return this._temporary;
    };

    TextHighlight.prototype.setTemporary = function(value) {
      this._temporary = value;
      if (value) {
        return this.$(this._highlights).addClass('annotator-hl-temporary');
      } else {
        return this.$(this._highlights).removeClass('annotator-hl-temporary');
      }
    };

    TextHighlight.prototype.setActive = function(value) {
      if (value) {
        return this.$(this._highlights).addClass('annotator-hl-active');
      } else {
        return this.$(this._highlights).removeClass('annotator-hl-active');
      }
    };

    TextHighlight.prototype.setFocused = function(value) {
      if (value) {
        return this.$(this._highlights).addClass('annotator-hl-focused');
      } else {
        return this.$(this._highlights).removeClass('annotator-hl-focused');
      }
    };

    TextHighlight.prototype.removeFromDocument = function() {
      var child, hl, _i, _len, _ref, _results;
      _ref = this._highlights;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hl = _ref[_i];
        if ((hl.parentNode != null) && this.annotator.domMapper.isPageMapped(this.pageIndex)) {
          child = hl.childNodes[0];
          _results.push(this.$(hl).replaceWith(hl.childNodes));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    TextHighlight.prototype._getDOMElements = function() {
      return this._highlights;
    };

    return TextHighlight;

  })(Annotator.Highlight);

  Annotator.Plugin.TextHighlights = (function(_super) {
    __extends(TextHighlights, _super);

    function TextHighlights() {
      this.getAnnotations = __bind(this.getAnnotations, this);
      this.getIndependentParent = __bind(this.getIndependentParent, this);
      this.isInstance = __bind(this.isInstance, this);
      this._createTextHighlight = __bind(this._createTextHighlight, this);
      _ref = TextHighlights.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextHighlights.prototype.highlightType = 'TextHighlight';

    TextHighlights.prototype.pluginInit = function() {
      var _this = this;
      this.Annotator = Annotator;
      this.$ = Annotator.$;
      this.annotator.registerHighlighter({
        name: "standard text highlighter",
        highlight: this._createTextHighlight,
        isInstance: this._isInstance,
        getIndependentParent: this._getIndependentParent
      });
      this.annotator.element.delegate(".annotator-hl", "mouseover", this, function(event) {
        return _this.annotator.onAnchorMouseover(event);
      });
      this.annotator.element.delegate(".annotator-hl", "mouseout", this, function(event) {
        return _this.annotator.onAnchorMouseout(event);
      });
      this.annotator.element.delegate(".annotator-hl", "mousedown", this, function(event) {
        return _this.annotator.onAnchorMousedown(event);
      });
      return this.annotator.element.delegate(".annotator-hl", "click", this, function(event) {
        return _this.annotator.onAnchorClick(event);
      });
    };

    TextHighlights.prototype._createTextHighlight = function(anchor, page) {
      var dfd, hl,
        _this = this;
      dfd = this.$.Deferred();
      switch (anchor.type) {
        case "text range":
          hl = new TextHighlight(anchor, page, anchor.range);
          dfd.resolve(hl);
          break;
        case "text position":
          this.annotator.domMapper.prepare("highlighting").then(function(s) {
            var browserRange, e2, error, mappings, normedRange, realRange;
            try {
              mappings = s.getMappingsForCharRange(anchor.start, anchor.end, [page]);
              realRange = mappings.sections[page].realRange;
              browserRange = new _this.Annotator.Range.BrowserRange(realRange);
              normedRange = browserRange.normalize(_this.annotator.wrapper[0]);
              hl = new TextHighlight(anchor, page, normedRange);
              return dfd.resolve(hl);
            } catch (_error) {
              error = _error;
              try {
                return dfd.reject({
                  message: "Cought exception",
                  error: error
                });
              } catch (_error) {
                e2 = _error;
                return console.log("WTF", e2.stack);
              }
            }
          });
          break;
        default:
          dfd.reject("Can only handle 'text range' and 'text position' anchors");
      }
      return dfd.promise();
    };

    TextHighlights.prototype.isInstance = function(element) {
      return this.$(element).hasClass('annotator-hl');
    };

    TextHighlights.prototype.getIndependentParent = function(element) {
      return this.$(element).parents(':not([class^=annotator-hl])')[0];
    };

    TextHighlights.prototype.getAnnotations = function(event) {
      return this.$(event.target).parents('.annotator-hl').andSelf().map(function() {
        return TextHighlight.$(this).data("annotation");
      }).toArray();
    };

    return TextHighlights;

  })(Annotator.Plugin);

}).call(this);

//
//@ sourceMappingURL=annotator.texthighlights.map